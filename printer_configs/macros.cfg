# define overrides for Mainsail/Fluidd predefined macros - see client.cfg
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 105.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 105.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 5.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_user_cancel_macro: "_CANCEL_PRINT_WITH_AUDIO_WARNING"
gcode:

[gcode_macro START_PRINT]
gcode:
    {% set bed_temp = params.BED_TEMP|default(60)|float %}             ; bed temp, usually set by slicer
    {% set extruder_temp = params.EXTRUDER_TEMP|default(200)|float %}  ; extruder temp, usually set by slicer
    {% set disable_priming = params.DISABLE_PRIMING|default(false) %}  ; allow disabling of priming before print
    {% set force_leveling = params.FORCE_LEVELING|default(false) %}    ; allow disabling of priming before print

    SET_FAN_SPEED FAN=pcb_fan SPEED=1
    M140 S{bed_temp}        ; start bed heating
    SET_GCODE_OFFSET Z=0.0  ; reset the G-Code Z offset (adjust Z offset if needed)
    G28                     ; home the printer

    # auto leveling, if no mesh loaded or force_leveling was set
    {%if (not printer['bed_mesh'].profile_name) or force_leveling %}
        AUTO_BED_LEVEL BED_TEMP={bed_temp} EXTRUDER_TEMP={extruder_temp}
    {% endif %}

    G90                     ; use absolute coordinates
    G1 Z5 F1800             ; move the nozzle near the bed
    # wait for bed to reach temp, don't wait for stabilization
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp}
    G1 Z0.15 F300           ; move the nozzle very close to the bed
    M109 S{extruder_temp}   ; set and wait for nozzle to reach temperature
    G1 Z5 F1800             ; raise z before first move

    # prime nozzle before print if not disabled
    {% if not disable_priming %}
        _PRIME_NOZZLE
    {% endif %}

[gcode_macro _CANCEL_PRINT_WITH_AUDIO_WARNING]
gcode:
    _COMMON_END_PRINT
    M300 S116 P350
    M300 S61 P1000

[gcode_macro END_PRINT]
gcode:
    G91                     ; relative positioning
    G1 X-2 Y-2 E-5 F2000    ; move away while retracting filament
    _COMMON_END_PRINT
    PLAY_MIDI FILE="getitem.mid" C=0

[gcode_macro _COMMON_END_PRINT]
# _COMMON_END_PRINT is used by END_PRINT and CANCEL_PRINT
gcode:
    M104 S0                 ; turn off extruder temperature
    M140 S0                 ; turn off bed temperature
    M107                    ; turn off part cooling fan
    G90                     ; absolute positioning
    G1 X105 Y105 Z220 F1500 ; move near end stop position
    M84                     ; disable motors
    SET_FAN_SPEED FAN=pcb_fan SPEED=0

[gcode_macro _PRIME_NOZZLE]
gcode:
    # Copied from Flashforge AD5M Orca Slicer Profile
    G90
    M83
    G1 E-1.5 F800
    G1 X110 Y-110 F6000
    G1 E2 F800
    G1 Y-110 X55 Z0.25 F4800
    G1 X-55 E8 F2400
    G1 Y-109.6 F2400
    G1 X55 E5 F2400
    G1 Y-110 X55 Z0.45 F4800
    G1 X-55 E8 F2400
    G1 Y-109.6 F2400
    G1 X55 E5 F2400
    G92 E0

[gcode_macro AUTO_BED_LEVEL]
gcode:
    {% set bed_temp = params.BED_TEMP|default(60)|float %}
    {% set extruder_temp = params.EXTRUDER_TEMP|default(200)|float %}
    {% set profile = params.PROFILE|default("auto") %}

    # clear old mesh and home if necessary
    BED_MESH_CLEAR
    {% if not "xyz" in printer.toolhead.homed_axes %}
        G28
    {% endif %}

    # bed heating
    G90                     ; absolute coordinates
    G1 Z5 F1800             ; raise bed
    M140 S{bed_temp}        ; set bed temp
    # wait for bed to reach temp, don't wait for stabilization
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp}
    LOAD_CELL_TARE          ; reset tare before manual probe

    # nozzle heating
    PROBE                   ; moove nozzle to bed
    G91                     ; relative position
    G1 Z-0.25               ; release pressure from bed
    M104 S{extruder_temp}   ; set nozzle temperature
    # wait for nozzle to reach temp, don't wait for stabilization
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}

    # get into position
    G90                     ; absolute coordinates
    G1 X-30 Y110 Z5 F18000  ; move in position for nozzle wipe
    PROBE                   ; moove nozzle to bed
    G91                     ; relative position
    G1 Z0.1 F300            ; release some pressure from bed

    # wipe move to right
    G1 X60 F900             ; wipe move to right
    G1 Y-1 F900
    # wipe move to left
    G1 X-30 F900            ; wipe move to left
    G1 Y-1 F900

    # wait for nozzle cooldown to 120Â°
    G1 Z-0.1                ; put full pressure on bed
    M106 S255               ; turn on fan
    M104 S0                 ; turn of noozle heating
    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=120
    M107                    ; turn off fan

    # start the calibration
    BED_MESH_CALIBRATE PROFILE={profile}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE_ORIG
gcode:
    G90                     ; absolute coordinates
    G1 Z2 F1800             ; move noozle near bed
    LOAD_CELL_TARE          ; reset tare before leveling
    _BED_MESH_CALIBRATE_ORIG {rawparams}

[gcode_macro LOAD_FILAMENT]
description: Manual filament loading / change
gcode:
    # TODO replace with fancier mechanism using Macro Prompts
    {% set EXTRUDER_TEMP = params.S|default(200)|float %}
    {% set EXTRUDER_LENGTH = params.E|default(150)|float %}
    M109 S{EXTRUDER_TEMP}       ; set and wait for nozzle to reach temperature
    G92 E0                      ; set extruder posision
    G1 E{EXTRUDER_LENGTH} F450  ; extrude with 7.5mm/s
    M104 S0                     ; turn off extruder temperature

[gcode_macro LOAD_CELL_TARE]
variable_success: 0
gcode:
    # reset success
    SET_GCODE_VARIABLE MACRO=LOAD_CELL_TARE VARIABLE=success VALUE=0
    # try set tare, up to 10 times
    {% for i in range(10) %}
        _LOAD_CELL_TARE_IF_NO_SUCCESS
    {% endfor %}
    # final check if successfull
    _LOAD_CELL_TARE_FINAL_CHECK

[gcode_macro _LOAD_CELL_TARE_IF_NO_SUCCESS]
gcode:
    {% if not printer["gcode_macro LOAD_CELL_TARE"].success %}
        _LOAD_CELL_TARE_SET
        _LOAD_CELL_TARE_CHECK
    {% endif %}

[gcode_macro _LOAD_CELL_TARE_SET]
gcode:
    # Tare is set by toggeling _level_h1 pin
    SET_PIN PIN=_level_h1 VALUE=0
    G4 P500
    M400
    SET_PIN PIN=_level_h1 VALUE=1
    G4 P500
    M400
    SET_PIN PIN=_level_h1 VALUE=0
    G4 P500
    M400
    SET_PIN PIN=_level_h1 VALUE=1
    G4 P500
    M400

[gcode_macro _LOAD_CELL_TARE_CHECK]
gcode:
    # If level check pin is set, tare is successfull.
    {% if "PRESSED" in printer['gcode_button _check_level_pin'].state %}
        SET_GCODE_VARIABLE MACRO=LOAD_CELL_TARE VARIABLE=success VALUE=1
    {% endif %}

[gcode_macro _LOAD_CELL_TARE_FINAL_CHECK]
gcode:
    # Check success
    {% if printer["gcode_macro LOAD_CELL_TARE"].success %}
        # Toggle level clear plin.
        # No sure what the level clear pin does. But we do the same as the stock software.
        SET_PIN PIN=_level_clear VALUE=0
        G4 P10
        M400
        SET_PIN PIN=_level_clear VALUE=1
        RESPOND TYPE=echo MSG="Load cell tare success."
    # Else raise error
    {% else %}
        {action_raise_error("Load cell tare failed.")}
    {% endif %}

[gcode_shell_command backlight]
command: setsid backlight
timeout: 1.
verbose: False

[gcode_macro LCD_ON]
description: Turn on the lcd screen and set the brightness in percent.
gcode:
  {% set brightness = params.BACKLIGHT|default("50") %}
  RUN_SHELL_COMMAND CMD=backlight PARAMS="{brightness}"

[gcode_macro LCD_OFF]
description: Turn off the lcd screen.
gcode:
  LCD_ON BACKLIGHT=0

[gcode_shell_command audio_freq]
command: audio freq
timeout: 3
verbose: False

[gcode_shell_command audio_midi]
command: setsid audio midi
timeout: 30
verbose: False

[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(10)|float %}
    RUN_SHELL_COMMAND CMD=audio_freq PARAMS="-f {S} -d {P / 1000}"

[gcode_macro PLAY_MIDI]
gcode:
    {% set FILE = params.FILE|default("getitem.mid")|string %}
    {% set C = params.C|default(0)|string %}
    RUN_SHELL_COMMAND CMD=audio_midi PARAMS="-m /usr/share/midis/{FILE} -c {C}"

[gcode_shell_command reboot-stock-system]
command: reboot-stock-system
timeout: 5
verbose: False

[gcode_macro REBOOT_STOCK_SYSTEM]
description: Reboot the printer to stock system.
gcode:
    {% if printer["idle_timeout"].state == "Printing" %}
        {action_raise_error("Not possible during print.")}
    {% endif %}

    RESPOND TYPE=command MSG="action:prompt_begin Question"
    RESPOND TYPE=command MSG="action:prompt_text The printer will reboot and start the stock Flashforge system. Select REBOOT to continue."
    RESPOND TYPE=command MSG="action:prompt_footer_button Abort|RESPOND TYPE=command MSG=action:prompt_end"
    RESPOND TYPE=command MSG="action:prompt_footer_button Reboot|_REBOOT_STOCK_SYSTEM|error"
    RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro _REBOOT_STOCK_SYSTEM]
gcode:
    TURN_OFF_HEATERS
    M84 ; disable stepper motors
    RUN_SHELL_COMMAND CMD=reboot-stock-system

[gcode_shell_command remove-klipper-mod]
command: remove-klipper-mod -f
timeout: 5
verbose: False

[gcode_macro REMOVE_KLIPPER_MOD]
description: Reboot the printer to stock system.
gcode:
    {% if printer["idle_timeout"].state == "Printing" %}
        {action_raise_error("Not possible during print.")}
    {% endif %}

    RESPOND TYPE=command MSG="action:prompt_begin Question"
    RESPOND TYPE=command MSG="action:prompt_text Klipper Mod will remove itself from the printer. All data related to the mod including G-Codes files will be lost. Select REMOVE to continue."
    RESPOND TYPE=command MSG="action:prompt_footer_button Abort|RESPOND TYPE=command MSG=action:prompt_end"
    RESPOND TYPE=command MSG="action:prompt_footer_button Remove|_REMOVE_KLIPPER_MOD|error"
    RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro _REMOVE_KLIPPER_MOD]
gcode:
    TURN_OFF_HEATERS
    M84 ; disable stepper motors
    RUN_SHELL_COMMAND CMD=remove-klipper-mod
